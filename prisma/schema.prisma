generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Categori {
  id Int @id @default(autoincrement())

  name     String    @unique
  products Product[]
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String @unique
  password String

  cart             Cart[]
  order            Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  Categori   Categori @relation(fields: [categoriId], references: [id])
  categoriId Int

  ingradient Ingradient[]
  variation  ProductVariation[]

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType String?

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Ingradient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products Product[]

  cartItem   CartItem @relation(fields: [cartItemId], references: [id])
  cartItemId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  totalAmout Int        @default(0)
  items      CartItem[]

  token String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem Product @relation(fields: [productId], references: [id])
  productId   Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  sum         Int          @default(0)
  ingradients Ingradient[]
  // pizzaSize Int?
  // pizzaType Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token      String
  totalAmout Int
  status     OrderStatus
  paymentId  Int?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
